@inject IProductService productService
@inject IColorService colorService
@inject NavigationManager navigationManager

@page "/products/edit/{id:int}"

<h3>Product Edit</h3>

@if (product != null)
{
    <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">

        <DataAnnotationsValidator />

        <label for="name">Name</label>
        <InputText id="name" @bind-Value="product.Name" class="form-control" />
        <ValidationMessage For="@(()=>product.Name)" />

        <label for="color">Color</label>
        <InputText id="color" @bind-Value="product.Color" class="form-control" />
        <ValidationMessage For="@(()=>product.Color)" />

        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="product.Price" class="form-control" />
        <ValidationMessage For="@(()=>product.Price)" />

        <div class="form-check">
            <label for="hasDiscount" class="form-check-label">Has Discount</label>
            <InputCheckbox id="hasDiscount" @bind-Value="product.HasDiscount" class="form-check-input" />
        </div>

        @if (product.HasDiscount)
        {
            <label for="discount">Discount</label>
            <InputNumber id="discount" @bind-Value="product.Discount" class="form-control" />
            <ValidationMessage For="@(()=>product.Discount)" />
        }

        <label for="color">Color</label>

        <InputSelect id="color" @bind-Value="product.Color" class="form-select">

            @foreach (var color in colors)
            {
                <option value="@color">@color</option>
            }

    </InputSelect>

    <InputSelect @bind-Value="product.Size" class="form-select">

        @foreach (var sizeTypes in sizeTypes)
        {
            <option value="@sizeTypes">@sizeTypes</option>
        }

    </InputSelect>

    <button type="submit" class="btn btn-primary btn-block">Save</button>

</EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private Product product;

    private IEnumerable<string> colors;

    private SizeType[] sizeTypes => Enum.GetValues<SizeType>();

    protected override async Task OnParametersSetAsync()
    {
        product = await productService.GetByIdAsync(Id);
        colors = await colorService.GetAsync();

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        await productService.UpdateAsync(product);

        navigationManager.NavigateTo("/products");
    }



}
