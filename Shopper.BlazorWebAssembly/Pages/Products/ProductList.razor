@page "/products"

@inject IProductService productService
@implements IAsyncDisposable


<h3>Product List</h3>

@if (isLoading)
{
    <div class="spinner-border"></div>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Color</th>
                <th scope="col">Price</th>
                <th scope="col">Tags</th>
                <th></th>
            </tr>
        </thead>

        <tbody>

            @if (products != null && products.Any())
            {
                @foreach (var product in products)
                {

                    <ProductItemComponent Product=@product />
                }
            }
            else
            {
                <tr>
                    <td colspan="3">Cannot find products</td>
                </tr>
            }

        </tbody>

        <tfoot>
            Quantity: @products?.Count()
        </tfoot>
    </table>

}

@code {

    private IEnumerable<Product>? products;

    private CancellationTokenSource cts = new CancellationTokenSource();

    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        products = await productService.GetAsync(cts.Token);

        isLoading = false;

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
